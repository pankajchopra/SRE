graph TD
    A[User Input] --> B[Intent Classification]
    B --> C[Topic Boundary Detection]
    C --> D[Context Analysis]
    D --> E[Entity Extraction]
    E --> F[Task Decomposition]
    F --> G[Tool/Agent Selection]
    G --> H[Execution Planning]
    H --> I[Response Generation]
    I --> J[Response Aggregation]
    J --> K[Filtering and Moderation]
    K --> L{Human Intervention?}
    L -->|Yes| M[Human Review]
    M --> N[Edit Response]
    N --> O[Final Response]
    L -->|No| O
    O --> P[Output to User]

    subgraph State
        Q[(ChatbotState)]
    end

    B -.-> Q
    C -.-> Q
    D -.-> Q
    E -.-> Q
    F -.-> Q
    G -.-> Q
    H -.-> Q
    I -.-> Q
    J -.-> Q
    K -.-> Q
    M -.-> Q
    N -.-> Q

    subgraph LangChain Integration
        R[LLM]
        S[Tools]
        T[Agents]
    end

    G --> R
    G --> S
    G --> T
    I --> R
    I --> S
    I --> T

    subgraph Persistence
        U[Checkpointer]
    end

    Q -.-> U
    U -.-> Q
    
    
    
    
    
    
    graph TD
    A((User Input))
    B((Intent Classification))
    C((Topic Boundary Detection))
    D((Context Analysis))
    E((Entity Extraction))
    F((Task Decomposition))
    G((Tool/Agent Selection))
    H((Execution Planning))
    I((Response Generation))
    J((Response Aggregation))
    K((Filtering and Moderation))
    O((Final Response))
    P((Output to User))

    A --> B
    B --> C
    C --> D
    D --> E
    E --> F
    F --> G
    G --> H
    H --> I
    I --> J
    J --> K
    K --> O
    O --> P

    subgraph State
        Q[(ChatbotState)]
    end

    B -.-> Q
    C -.-> Q
    D -.-> Q
    E -.-> Q
    F -.-> Q
    G -.-> Q
    H -.-> Q
    I -.-> Q
    J -.-> Q
    K -.-> Q
    O -.-> Q

    subgraph LangChain Integration
        R[LLM]
        S[Tools]
        T[Agents]
    end

    B & C & D & E & F & G & H & I & J & K --> R
    G & I --> S
    G & I --> T

    subgraph Persistence
        U[Checkpointer]
    end

    Q -.-> U
    U -.-> Q
    
    
    
    
    
    
    
    
    flowchart TD
    RAGAgentNote["ReAct Agent decides what tools\nto call to complete the query"] -.- RAGAgent(("RAG Agent"))
    ClientInformationExtractorNote["Decides what tools to\nuse to get the information"] -.- ClientInformationExtractor(("Tool Selection\nAgent"))
    ApplicationInvokeAgent(("Application Invoke\nAgent")) --> Tools2["T o o l (s)<br>"]
    ApplicationInvokeAgentNote["Decides what tools to call to complete the\ninformation needed for invoking the Application"] -.- ApplicationInvokeAgent
    SupervisorAgent -- final response --> User
    User["User/system prompt"] == prompt ==> SupervisorAgent(("Supervisor Agent"))
    SupervisorAgent -- prompt --> PromptAnalyzer(("Prompt Analyzer\nAgent"))
    PromptAnalyzer -- conditional_edge --> Decision{"decision"}
    Decision -- bad_prompt --> SupervisorAgent
    Decision -- good_prompt --> TaskExtractorAgent(("Task Extractor\nAgent"))
    SupervisorAgent -- all_responses --> ResponseGenerator(("Response Generator\nAgent"))
    ResponseGenerator == response and hostory ==> LLM((("Gemini-Pro-Flex")))
    ResponseGenerator -- final_response --> ResponseAnalyser(("Response Analyser\nAgent"))
    ResponseAnalyser --- use_tool[" "]
    use_tool --> Tool["T o o l (s)<br>"]
    ResponseAnalyser ==> SupervisorAgent
    DefaultFinancialAdvisorPersona["Default Financial Advisor\nPersona"] -.-> SupervisorAgent
    TaskExtractorAgent ====> RAGAgent & ApplicationInvokeAgent & ClientInformationExtractor
    TaskExtractorAgent -- all_tasks_done --> SupervisorAgent
    RAGAgent ==> Tools1["T o o l (s)"]
    ClientInformationExtractor --> Tools3["T o o l (s)<br>"]
     RAGAgentNote:::yellow
     ClientInformationExtractorNote:::yellow
     ApplicationInvokeAgentNote:::yellow
     User:::blue
     SupervisorAgent:::stroke:#424242,color:#000000
     PromptAnalyzer:::stroke:#000000
     Decision:::stroke:#424242,color:#000000
     TaskExtractorAgent:::stroke:#424242
     ResponseGenerator:::stroke:#424242,color:#000000
     ResponseAnalyser:::stroke:#616161,color:#000000
    classDef yellow fill:#FFEA00
    classDef blue fill:#66b3ff,stroke:#333,stroke-width:2px
    style RAGAgentNote color:#D50000
    style RAGAgent color:#FFFFFF,stroke:#BBDEFB,fill:#424242
    style ClientInformationExtractorNote color:#D50000
    style ClientInformationExtractor stroke:#424242,color:#FFFFFF
    style ApplicationInvokeAgent stroke:#424242,color:#FFFFFF
    style ApplicationInvokeAgentNote color:#D50000
    style SupervisorAgent color:#FFFFFF
    style PromptAnalyzer color:#FFFFFF
    style TaskExtractorAgent color:#FFFFFF
    style LLM stroke:#00C853,color:#FFFFFF
    style ResponseAnalyser color:#FFFFFF

