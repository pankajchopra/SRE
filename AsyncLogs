import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.concurrent.CompletableFuture;

@SpringBootApplication
@EnableAsync
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

@RestController
public class LoggingController {

    private final AsyncLoggingService asyncLoggingService;

    public LoggingController(AsyncLoggingService asyncLoggingService) {
        this.asyncLoggingService = asyncLoggingService;
    }

    @GetMapping("/log")
    public String logSomething() {
        asyncLoggingService.processLogAsync();
        return "Request received! Logging will happen asynchronously.";
    }
}

@Service
class AsyncLoggingService {

    @Async
    public CompletableFuture<Void> processLogAsync() {
        // Simulate a long-running task
        try {
            Thread.sleep(5000);  // Simulate some work
            System.out.println("Log processed asynchronously.");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return CompletableFuture.completedFuture(null);
    }
}


Creating a New Thread: A new thread is created to handle the log processing task. This thread runs concurrently with the controller’s main thread.
Non-blocking: The controller thread returns immediately, while the new thread handles the log processing in the background.


To run a separate thread in a Spring Boot controller, you can use several approaches depending on your specific use case. The most common ways to create and manage threads in Spring Boot are by:

Creating a Thread Manually
Using Spring’s @Async Annotation
Using an ExecutorService
I'll walk through each approach below.

1. Manually Creating a Thread
You can manually create a thread in your Spring Boot controller using the standard Java Thread class. However, this is not recommended for large-scale applications, as manual thread management can become cumbersome and hard to manage.

Example: Manual Thread Creation
java
Copy code
@RestController
public class LoggingController {

    @GetMapping("/log")
    public String logSomething() {
        new Thread(() -> {
            // Long-running task or log processing
            try {
                Thread.sleep(5000);  // Simulate some work
                System.out.println("Log processed in a separate thread.");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();
        
        return "Request received! Logging will happen in the background.";
    }
}
In this example:

A new thread is created for each request.
The main controller thread immediately returns a response, while the logging task continues in the background.
2. Using Spring’s @Async Annotation
Spring Boot provides an easy way to run asynchronous tasks with the @Async annotation. This is a more convenient and scalable solution than manually creating threads.

Steps:
Enable Async Support: Add @EnableAsync to one of your configuration classes or the main Spring Boot application class.
Create an Async Method: Annotate the method that you want to run asynchronously with @Async.
Example: Using @Async in a Spring Boot Controller
java
Copy code
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.concurrent.CompletableFuture;

@SpringBootApplication
@EnableAsync  // Enable async support
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

@RestController
public class LoggingController {

    private final AsyncLoggingService asyncLoggingService;

    public LoggingController(AsyncLoggingService asyncLoggingService) {
        this.asyncLoggingService = asyncLoggingService;
    }

    @GetMapping("/log")
    public String logSomething() {
        asyncLoggingService.processLogAsync();
        return "Request received! Logging will happen asynchronously.";
    }
}

@Service
class AsyncLoggingService {

    @Async
    public CompletableFuture<Void> processLogAsync() {
        // Long-running task
        try {
            Thread.sleep(5000);  // Simulate work
            System.out.println("Log processed asynchronously.");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return CompletableFuture.completedFuture(null);
    }
}
In this example:

@EnableAsync is added to the Spring Boot application to enable asynchronous processing.
The @Async annotation on processLogAsync() runs the method asynchronously.
CompletableFuture is used to handle the async result. You can return any type, but CompletableFuture is often used to represent the async computation.
Pros:

The @Async annotation makes it easy to offload tasks to a separate thread pool.
No need for manual thread management.
3. Using ExecutorService for More Control
If you need more control over the threads, you can use ExecutorService to manage a thread pool. 
This allows you to control the number of threads and manage their lifecycle explicitly.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@RestController
public class LoggingController {

    private final ExecutorService executorService = Executors.newFixedThreadPool(10); // Thread pool with 10 threads

    @GetMapping("/log")
    public String logSomething() {
        executorService.submit(() -> {
            // Long-running task or log processing
            try {
                Thread.sleep(5000);  // Simulate work
                System.out.println("Log processed in a separate thread from thread pool.");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        
        return "Request received! Logging will happen in the background using a thread pool.";
    }
}
-------
<configuration>

    <!-- Console Appender for outputting logs to the console -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- Asynchronous Appender -->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- Queue Size: Set a large queue size based on your logging volume -->
        <queueSize>50000</queueSize>
        
        <!-- Discarding Threshold: Controls when to start discarding logs if the queue is full (0 means no discarding) -->
        <discardingThreshold>0</discardingThreshold>
        
        <!-- Never block the main thread, even if the queue is full -->
        <neverBlock>true</neverBlock>
        
        <!-- Include references to other appenders (e.g., console) -->
        <appender-ref ref="CONSOLE"/>
    </appender>

    <!-- Root logger: Sends all logs to the async appender -->
    <root level="INFO">
        <appender-ref ref="ASYNC"/>
    </root>
</configuration>
-----------------------------------------

Yes, you can implement a scheduler in each Spring Boot instance that checks the database and updates the necessary data across all instances. This is a viable solution to ensure consistency between your multiple cloud instances when you don’t have access to a distributed cache like Redis or a centralized cache management solution.

Here’s how you can implement this approach effectively:

### 1. **Use a Scheduler in Spring Boot**

Spring Boot provides support for scheduling tasks using the `@Scheduled` annotation. You can set up a periodic scheduler that checks the database and updates the cache or any other data in all instances.

#### Steps to Implement the Scheduler:

1. **Enable Scheduling in Spring Boot**:
   - Add the `@EnableScheduling` annotation to your Spring Boot main class to enable scheduling.
   ```java
   @SpringBootApplication
   @EnableScheduling
   public class MyApplication {
       public static void main(String[] args) {
           SpringApplication.run(MyApplication.class, args);
       }
   }
   ```

2. **Implement the Scheduler Logic**:
   - Create a service class that will check the database at regular intervals. This service will query the database for any new or updated data, and then propagate the updates to the local cache of each instance.

   Example scheduler service:
   ```java
   @Service
   public class DataUpdateScheduler {

       @Autowired
       private MyDatabaseService myDatabaseService;

       @Autowired
       private CacheService cacheService;

       // Run this method every 10 minutes (configurable)
       @Scheduled(fixedRate = 600000)
       public void checkAndUpdateData() {
           // Fetch data from the database (you can add filtering logic for changed data)
           List<MyEntity> updatedData = myDatabaseService.fetchUpdatedData();

           // Update the cache or any other in-memory data structures
           cacheService.updateCache(updatedData);
       }
   }
   ```

3. **Define the Database Service**:
   - The `MyDatabaseService` is responsible for fetching the updated data from the database. You can implement a strategy where only the modified or new records are fetched to reduce load.

   Example:
   ```java
   @Service
   public class MyDatabaseService {

       @Autowired
       private MyEntityRepository myEntityRepository;

       public List<MyEntity> fetchUpdatedData() {
           // Fetch records that were updated in the last X minutes (you can use timestamps)
           return myEntityRepository.findRecentUpdates();
       }
   }
   ```

4. **Update Cache or In-Memory Data**:
   - The `CacheService` is responsible for updating the local cache (or any other in-memory storage) of the current instance. Each instance would have its own scheduler and its own cache, so the updates will ensure all instances are synchronized via database polling.

   Example:
   ```java
   @Service
   public class CacheService {

       @Autowired
       private CacheManager cacheManager;

       public void updateCache(List<MyEntity> updatedData) {
           // Iterate through updated data and update the cache
           for (MyEntity entity : updatedData) {
               cacheManager.put(entity.getId(), entity);
           }
       }
   }
   ```

5. **Optimize Database Queries**:
   - To reduce the load on the database, only query for the data that has been updated recently (e.g., based on a timestamp).
   - Use an efficient indexing strategy in your database to support these queries.

### 2. **Considerations for Multi-Instance Synchronization**

In a multi-instance environment, you should ensure the following:

- **Concurrent Schedulers**: Each instance will run its own scheduler, so they will each query the database and update their own local caches. This ensures that all instances stay up to date with the latest data.
  
- **Atomic Updates**: If your scheduler is updating data that might conflict (e.g., shared state), ensure that the updates are atomic and handled appropriately to avoid race conditions.

- **Database as Source of Truth**: In this architecture, the database becomes the "source of truth." All instances regularly query the database for changes, so they eventually become consistent, even if some instance misses an update initially.

- **Cache Invalidation**: If using an in-memory cache, make sure to invalidate stale data. You can either set expiration policies on the cached items or explicitly clear the cache before updating it.

### 3. **Avoid Overlapping Schedules (Optional)**

If you don’t want all instances to query the database at the same time, you can stagger the schedule or add a mechanism to ensure that only one instance performs the update at a time.

One approach is using a **leader election mechanism**, where only one instance is responsible for updating the data and others wait or check for updates.

Here’s a way to achieve this:

- **Database Locking**: Use a table in the database to track the instance responsible for running the update (i.e., a "leader"). Before each scheduled task, check if the current instance is the leader, and only allow the leader to execute the update.

  Example:
  ```java
  @Scheduled(fixedRate = 600000)
  public void checkAndUpdateData() {
      // Check if this instance is the leader
      if (myDatabaseService.isCurrentInstanceLeader()) {
          List<MyEntity> updatedData = myDatabaseService.fetchUpdatedData();
          cacheService.updateCache(updatedData);
      }
  }
  ```

- **Distributed Locking**: If using a distributed database like PostgreSQL or MySQL, you can implement distributed locking to ensure that only one instance performs the update.

### 4. **Example Database Locking Mechanism**

You can create a simple table to manage the scheduler lock:
```sql
CREATE TABLE scheduler_lock (
    id SERIAL PRIMARY KEY,
    locked_by VARCHAR(255),
    lock_time TIMESTAMP
);
```

Then, before running the scheduled task, attempt to acquire the lock in the database:
```java
public boolean isCurrentInstanceLeader() {
    String instanceId = getInstanceId(); // Get the unique ID of the current instance

    // Try to acquire lock
    return jdbcTemplate.update("UPDATE scheduler_lock SET locked_by = ?, lock_time = NOW() WHERE locked_by IS NULL OR lock_time < NOW() - INTERVAL '5 MINUTES'",
            instanceId) > 0;
}
```

### 5. **Drawbacks of This Approach**
- **Database Load**: Frequent polling from all instances can increase the load on the database.
- **Eventual Consistency**: Since the scheduler runs periodically, there may be some delay in synchronizing data across instances, leading to eventual consistency rather than real-time updates.

### 6. **Optimizing the Scheduler**:
   - **Polling Interval**: Adjust the polling interval based on the data volatility (e.g., every few minutes for frequently changing data).
   - **Batching Updates**: If a large amount of data changes frequently, you can batch updates in the cache to minimize the number of database queries.

### Conclusion

Using a scheduler in each instance that checks the database and updates the instance’s local cache or memory is a 
feasible solution when you cannot use Redis or another distributed cache. Ensure that your scheduler is well-optimized 
and consider adding locking or leader election if needed to avoid race conditions or redundant database access across 
instances.



